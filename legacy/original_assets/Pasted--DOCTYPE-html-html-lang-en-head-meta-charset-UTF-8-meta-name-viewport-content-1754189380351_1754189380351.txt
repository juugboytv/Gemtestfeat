<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Integrated Chat Pro (Aetherial Shard)</title>
    
    <script src="https://cdn.tailwindcss.com"></script>
    
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600&family=Orbitron:wght@400;700;900&display=swap" rel="stylesheet">

    <style>
        /* --- Base & Theme Styles (Aetherial Shard) --- */
        :root {
            --highlight-cyan: #22d3ee; /* Tailwind's cyan-400 */
            --glow-cyan: #67e8f9;      /* Tailwind's cyan-300 */
            --text-primary: #f0f0f0;
            --text-secondary: #a0a0a0;
            --panel-bg-color: rgba(30, 35, 45, 0.65); /* Cool, dark gray */
            --input-bg: rgba(0, 0, 0, 0.4);
        }

        @keyframes pulse-border-cyan {
            0% {
                border-color: rgba(34, 211, 238, 0.4); 
                box-shadow: 0 0 15px rgba(34, 211, 238, 0.2), 0 4px 30px rgba(0, 0, 0, 0.6);
            }
            50% {
                border-color: rgba(103, 232, 249, 0.7);
                box-shadow: 0 0 25px rgba(103, 232, 249, 0.3), 0 4px 30px rgba(0, 0, 0, 0.6);
            }
            100% {
                border-color: rgba(34, 211, 238, 0.4);
                box-shadow: 0 0 15px rgba(34, 211, 238, 0.2), 0 4px 30px rgba(0, 0, 0, 0.6);
            }
        }

        html, body {
            height: 100%;
        }
        body {
            font-family: 'Inter', sans-serif;
            color: var(--text-primary);
            background-color: #121212; /* Matching your game's dark background */
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 1rem;
            overflow: hidden;
        }
        #smoke-canvas {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            z-index: -1;
            opacity: 0.5;
        }
        h1, h2, h3, h4, h5, h6, .font-orbitron {
            font-family: 'Orbitron', sans-serif;
            color: var(--text-primary);
            text-shadow: 0 0 8px rgba(34, 211, 238, 0.5);
        }

        /* --- Panel & Button Styles --- */
        .glass-panel {
            /* Crystalline Texture Overlay */
            background-image: 
                linear-gradient(var(--panel-bg-color), var(--panel-bg-color)),
                url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='4' height='4' viewBox='0 0 4 4'%3E%3Cpath fill='%23ffffff' fill-opacity='0.02' d='M1 3h1v1H1V3zm2-2h1v1H3V1z'%3E%3C/path%3E%3C/svg%3E");
            -webkit-backdrop-filter: blur(10px);
            backdrop-filter: blur(10px);
            border: 1px solid;
            animation: pulse-border-cyan 5s ease-in-out infinite;
        }
        .glass-button {
            background: rgba(255, 255, 255, 0.05);
            border: 1px solid rgba(34, 211, 238, 0.25);
            color: var(--text-primary);
            transition: all 0.2s ease-in-out;
            display: flex;
            align-items: center;
            justify-content: center;
            flex-shrink: 0;
        }
        .glass-button:disabled {
            background: rgba(60, 60, 60, 0.4) !important;
            border-color: rgba(100, 100, 100, 0.8) !important;
            cursor: not-allowed;
            color: #6b7280 !important;
        }
        .glass-button:not(:disabled):hover, .glass-button.active {
            background: rgba(34, 211, 238, 0.15);
            border-color: rgba(34, 211, 238, 0.6);
            transform: translateY(-2px);
        }
        .glass-button:not(:disabled):active {
            transform: translateY(1px) scale(0.98);
        }

        /* --- Chat Specific Styles --- */
        .custom-scrollbar::-webkit-scrollbar { width: 6px; }
        .custom-scrollbar::-webkit-scrollbar-track { background: transparent; }
        .custom-scrollbar::-webkit-scrollbar-thumb { background-color: rgba(34, 211, 238, 0.4); border-radius: 3px; }
        .custom-scrollbar::-webkit-scrollbar-thumb:hover { background-color: rgba(34, 211, 238, 0.6); }
        
        .footer-tab-button.active {
            color: var(--highlight-cyan);
            text-shadow: 0 0 6px var(--highlight-cyan);
        }
        .footer-chat-input {
            background: var(--input-bg);
            border: 1px solid rgba(34, 211, 238, 0.25);
            color: var(--text-primary);
        }
        .footer-chat-input::placeholder { color: var(--text-secondary); }
        .footer-chat-input:focus {
            outline: none;
            border-color: var(--highlight-cyan);
        }

        /* --- Pro Modal Styles --- */
        .sidebar-closed { transform: translateX(-100%); }
        .sidebar-open { transform: translateX(0); }
        .chat-bubble {
            background: rgba(10, 15, 20, 0.7) !important;
            -webkit-backdrop-filter: blur(10px);
            backdrop-filter: blur(10px);
            border: 1px solid;
            position: relative;
        }
        .chat-bubble-user { border-color: rgba(34, 211, 238, 0.4); }
        .chat-bubble-other { border-color: rgba(34, 211, 238, 0.2); }
        .reply-icon { cursor: pointer; opacity: 0.4; transition: opacity 0.2s; }
        .message-wrapper:hover .reply-icon { opacity: 1; }
        .reply-quote { background: rgba(0,0,0,0.3); border-left: 2px solid var(--highlight-cyan); padding: 6px 10px; border-radius: 4px; margin-bottom: 8px; font-size: 0.8rem; }
        .avatar { width: 40px; height: 40px; border-radius: 50%; object-fit: cover; border: 2px solid rgba(34, 211, 238, 0.25); }
        .tab { cursor: pointer; transition: all 0.2s; border-bottom: 3px solid transparent; padding-bottom: 8px; color: var(--text-secondary); }
        .tab.active { border-bottom-color: var(--highlight-cyan); color: var(--highlight-cyan); text-shadow: 0 0 8px var(--highlight-cyan); }
        .btn-primary { background-color: transparent; border: 2px solid var(--highlight-cyan); color: var(--highlight-cyan); transition: all 0.3s ease; }
        .btn-primary:hover { background-color: var(--highlight-cyan); color: #000; box-shadow: 0 0 15px var(--highlight-cyan); }
        .modal-backdrop { position: fixed; inset: 0; background-color: rgba(0, 0, 0, 0.7); display: flex; align-items: center; justify-content: center; z-index: 50; }
        input {
            background: var(--input-bg);
            border: 1px solid rgba(34, 211, 238, 0.25);
            border-radius: 0.5rem;
            padding: 0.75rem 1rem;
            transition: all 0.2s;
            color: var(--text-primary);
        }
        input::placeholder { color: var(--text-secondary); }
        input:focus {
            outline: none;
            border-color: var(--highlight-cyan);
            box-shadow: 0 0 10px rgba(34, 211, 238, 0.4);
        }
    </style>
</head>
<body>
    <canvas id="smoke-canvas"></canvas>

    <!-- Footer Chat (Mini View) -->
    <footer class="w-full max-w-md flex-shrink-0 fixed bottom-4">
        <div id="footer-chat-container" class="glass-panel w-full p-2 rounded-lg flex flex-col">
            
            <!-- Channel Tabs & Open Modal Button -->
            <div class="flex-shrink-0 flex flex-wrap gap-1 mb-2">
                <button data-channel="main" class="footer-tab-button glass-button text-xs px-3 py-1 rounded-md flex-grow active">Main Chat</button>
                <button data-channel="sales" class="footer-tab-button glass-button text-xs px-3 py-1 rounded-md flex-grow">Sales Chat</button>
                <button data-channel="clan" class="footer-tab-button glass-button text-xs px-3 py-1 rounded-md flex-grow">Clan Chat</button>
                <button id="open-chat-modal-btn" class="glass-button text-xs px-2 py-1 rounded-md" title="Open Full Chat">
                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 8V4m0 0h4M4 4l5 5m11-1V4m0 0h-4m4 0l-5 5M4 16v4m0 0h4m-4 0l5-5m11 5v-4m0 0h-4m4 0l-5-5"></path></svg>
                </button>
            </div>

            <!-- Message Display Area -->
            <div id="footer-chat-content-wrapper" class="text-xs space-y-1 overflow-y-auto custom-scrollbar flex-grow" style="height: 120px;">
                 <!-- Content will be dynamically inserted here -->
            </div>

            <!-- Message Input Form -->
            <form id="footer-message-form" class="flex-shrink-0 flex gap-2 mt-2">
                <input type="text" id="footer-message-input" class="footer-chat-input flex-grow w-full px-2 py-1 text-xs rounded-md" placeholder="Type a message..." autocomplete="off">
                <button type="submit" id="footer-send-button" class="glass-button text-xs px-3 py-1 rounded-md">Send</button>
            </form>
        </div>
    </footer>


    <!-- Main Chat Modal -->
    <div id="chat-modal" class="modal-backdrop hidden">
        <div class="relative w-11/12 max-w-5xl h-[90vh] max-h-[850px] rounded-2xl flex glass-panel overflow-hidden">
            
            <button id="close-chat-modal-btn" class="absolute top-3 right-4 text-gray-400 hover:text-white z-50">
                <svg class="w-7 h-7" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path></svg>
            </button>

            <!-- Mobile Sidebar Overlay -->
            <div id="sidebar-overlay" class="fixed inset-0 bg-black/60 z-30 hidden md:hidden"></div>

            <!-- Sidebar -->
            <div id="sidebar" class="absolute md:relative z-40 h-full w-4/5 max-w-xs md:w-1/3 md:max-w-[320px] flex flex-col p-4 transition-transform duration-300 ease-in-out sidebar-closed md:sidebar-open glass-panel md:bg-transparent md:border-r md:border-l-0 md:border-t-0 md:border-b-0 md:shadow-none border-white/10">
                <button id="close-sidebar-btn" class="md:hidden absolute top-4 right-4 text-gray-300 hover:text-white"><svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path></svg></button>
                
                <div class="mt-8 md:mt-0 p-3 glass-panel rounded-lg">
                    <div class="flex items-center gap-3">
                        <img id="sidebar-avatar" src="https://placehold.co/64x64/1a1a1a/22d3ee?text=J" class="avatar w-12 h-12">
                        <div class="text-left overflow-hidden">
                            <p id="sidebar-username" class="font-bold text-lg truncate">JuugBoyTV</p>
                            <p class="text-xs capitalize" style="opacity: 0.8;">Player</p>
                        </div>
                    </div>
                </div>

                <div class="flex-grow flex flex-col min-h-0 pt-4">
                    <h2 id="online-users-header" class="text-lg font-orbitron mb-2 pl-2">Online</h2>
                    <div id="online-users-list" class="flex-grow overflow-y-auto custom-scrollbar pr-2"></div>
                </div>
            </div>

            <!-- Main Chat Content -->
            <div class="flex-1 flex flex-col w-full md:w-auto min-w-0">
                <div class="p-4 border-b border-white/10 flex items-center justify-between relative bg-black/20">
                    <button id="open-sidebar-btn" class="md:hidden"><svg class="w-7 h-7" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"></path></svg></button>
                    <div id="tabs-container" class="flex-grow flex justify-center gap-4 md:gap-8 text-md font-orbitron font-bold">
                        <div class="tab active" data-channel="main">Main Chat</div>
                        <div class="tab" data-channel="sales">Sales Chat</div>
                        <div class="tab" data-channel="clan">Clan Chat</div>
                    </div>
                    <div class="w-7 md:hidden"></div>
                </div>
                <div id="content-container" class="flex-grow flex flex-col min-h-0 bg-black/10">
                    <div id="chat-messages" class="flex-grow p-4 overflow-y-auto custom-scrollbar"></div>
                </div>
                <div id="typing-indicator" class="px-4 pb-2 text-sm text-gray-500 h-6"></div>
                <div id="reply-indicator" class="px-4 pt-2 hidden"><div class="glass-panel bg-opacity-80 rounded-t-lg p-2 text-sm"><div class="flex justify-between items-center"><div><p class="font-semibold" style="color: var(--highlight-cyan);">Replying to <span id="reply-username"></span></p><p id="reply-text" class="text-gray-300 truncate"></p></div><button id="cancel-reply-btn" class="text-gray-400 hover:text-white text-2xl">&times;</button></div></div></div>
                <form id="message-form" class="p-4 flex items-center gap-3 border-t border-white/10 bg-black/20">
                    <input type="text" id="message-input" placeholder="Type your message..." autocomplete="off" class="flex-grow">
                    <button type="submit" id="send-button" class="font-bold py-3 px-5 rounded-lg btn-primary">Send</button>
                </form>
            </div>
        </div>
    </div>

    <script>
        // --- Smoke Canvas Animation ---
        const canvas = document.getElementById('smoke-canvas');
        const ctx = canvas.getContext('2d');
        canvas.width = window.innerWidth;
        canvas.height = window.innerHeight;

        let particles = [];
        const particleCount = 75;

        class Particle {
            constructor() {
                this.x = Math.random() * canvas.width;
                this.y = Math.random() * canvas.height;
                this.size = Math.random() * 150 + 50;
                this.speedX = Math.random() * 0.4 - 0.2;
                this.speedY = Math.random() * 0.4 - 0.2;
                this.color = `rgba(34, 211, 238, ${Math.random() * 0.07})`; // Faint cyan particles
            }
            update() {
                this.x += this.speedX;
                this.y += this.speedY;
                if (this.x < -this.size) this.x = canvas.width + this.size;
                if (this.x > canvas.width + this.size) this.x = -this.size;
                if (this.y < -this.size) this.y = canvas.height + this.size;
                if (this.y > canvas.height + this.size) this.y = -this.size;
            }
            draw() {
                ctx.fillStyle = this.color;
                ctx.beginPath();
                ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2);
                ctx.filter = 'blur(60px)';
                ctx.fill();
            }
        }

        function initParticles() {
            particles = [];
            for (let i = 0; i < particleCount; i++) {
                particles.push(new Particle());
            }
        }

        function animateSmoke() {
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            for (let i = 0; i < particles.length; i++) {
                particles[i].update();
                particles[i].draw();
            }
            requestAnimationFrame(animateSmoke);
        }
        
        window.addEventListener('resize', () => {
            canvas.width = window.innerWidth;
            canvas.height = window.innerHeight;
            initParticles();
        });

        initParticles();
        animateSmoke();

        // --- App Logic (Local Only) ---
        
        // Mock Data
        const currentUser = {
            id: 'user_01',
            name: 'JuugBoyTV',
            avatarUrl: 'https://placehold.co/64x64/1a1a1a/22d3ee?text=J'
        };

        const onlineUsers = [
            { id: 'user_01', name: 'JuugBoyTV', avatarUrl: 'https://placehold.co/40x40/1a1a1a/22d3ee?text=J' },
            { id: 'user_02', name: 'ShadowStrike', avatarUrl: 'https://placehold.co/40x40/1a1a1a/ffffff?text=S' },
            { id: 'user_03', name: 'CrimsonBlade', avatarUrl: 'https://placehold.co/40x40/1a1a1a/ffffff?text=C' },
            { id: 'user_04', name: 'ArcaneWiz', avatarUrl: 'https://placehold.co/40x40/1a1a1a/ffffff?text=A' },
        ];

        // App State
        let localMessages = {
            main: [],
            sales: [],
            clan: []
        };
        let activeChannel = 'main';
        let replyingToMessage = null;

        // UI Elements
        const ui = {
            footerMessageForm: document.getElementById('footer-message-form'),
            footerMessageInput: document.getElementById('footer-message-input'),
            footerTabButtons: document.querySelectorAll('.footer-tab-button'),
            footerChatContentWrapper: document.getElementById('footer-chat-content-wrapper'),
            
            chatModal: document.getElementById('chat-modal'),
            openChatModalBtn: document.getElementById('open-chat-modal-btn'),
            closeChatModalBtn: document.getElementById('close-chat-modal-btn'),
            
            sidebar: document.getElementById('sidebar'),
            sidebarOverlay: document.getElementById('sidebar-overlay'),
            openSidebarBtn: document.getElementById('open-sidebar-btn'),
            closeSidebarBtn: document.getElementById('close-sidebar-btn'),
            onlineUsersList: document.getElementById('online-users-list'),

            tabsContainer: document.getElementById('tabs-container'),
            chatMessages: document.getElementById('chat-messages'),
            
            messageForm: document.getElementById('message-form'),
            messageInput: document.getElementById('message-input'),
            
            replyIndicator: document.getElementById('reply-indicator'),
            replyUsername: document.getElementById('reply-username'),
            replyText: document.getElementById('reply-text'),
            cancelReplyBtn: document.getElementById('cancel-reply-btn'),
        };

        // --- Functions ---

        function toggleSidebar(show) {
            if (show) {
                ui.sidebar.classList.remove('sidebar-closed');
                ui.sidebar.classList.add('sidebar-open');
                ui.sidebarOverlay.classList.remove('hidden');
            } else {
                ui.sidebar.classList.add('sidebar-closed');
                ui.sidebar.classList.remove('sidebar-open');
                ui.sidebarOverlay.classList.add('hidden');
            }
        }

        function setReplyingTo(message) {
            replyingToMessage = message;
            ui.replyUsername.textContent = message.userName;
            ui.replyText.textContent = message.text || '...';
            ui.replyIndicator.classList.remove('hidden');
            ui.messageInput.focus();
        }

        function cancelReply() {
            replyingToMessage = null;
            ui.replyIndicator.classList.add('hidden');
        }

        function renderAllMessages() {
            const messages = localMessages[activeChannel];
            
            ui.chatMessages.innerHTML = '';
            ui.footerChatContentWrapper.innerHTML = '';

            messages.forEach(msg => {
                renderModalMessage(msg);
                renderFooterMessage(msg);
            });

            ui.chatMessages.scrollTop = ui.chatMessages.scrollHeight;
            ui.footerChatContentWrapper.scrollTop = ui.footerChatContentWrapper.scrollHeight;
        }

        function renderModalMessage(message) {
            const isCurrentUser = message.userId === currentUser.id;
            const messageWrapper = document.createElement('div');
            messageWrapper.className = `message-wrapper flex items-start gap-3 mb-4 ${isCurrentUser ? 'justify-end' : 'justify-start'}`;
            const time = new Date(message.timestamp).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
            
            let replyHtml = '';
            if (message.replyTo) {
                replyHtml = `<div class="reply-quote"><p class="font-bold" style="color: var(--highlight-cyan);">${message.replyTo.userName}</p><p class="text-gray-300">${message.replyTo.text || '...'}</p></div>`;
            }
            
            const messageContent = `<div class="flex flex-col ${isCurrentUser ? 'items-end' : 'items-start'}"><div class="chat-bubble ${isCurrentUser ? 'chat-bubble-user' : 'chat-bubble-other'} rounded-lg px-4 py-2 max-w-xs lg:max-w-md"><p class="text-xs font-bold" style="color: ${isCurrentUser ? 'var(--highlight-cyan)' : '#ccc'}">${message.userName}</p>${replyHtml}<p class="text-sm break-words mt-1">${message.text}</p></div></div>`;
            const avatarImg = `<img src="${message.avatarUrl}" class="avatar self-start" title="${time}" onerror="this.src='https://placehold.co/40x40/1a1a1a/22d3ee?text=${message.userName ? message.userName[0] : '?'}'">`;
            const replyIconHtml = `<div class="reply-icon p-1" data-message-id="${message.id}" data-user-name="${message.userName}" data-text="${message.text}"><svg class="w-4 h-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 10h10a8 8 0 018 8v2M3 10l6-6m-6 6l6 6"></path></svg></div>`;

            messageWrapper.innerHTML = isCurrentUser 
                ? `${replyIconHtml}${messageContent}${avatarImg}`
                : `${avatarImg}${messageContent}${replyIconHtml}`;
            
            ui.chatMessages.appendChild(messageWrapper);
        }

        function renderFooterMessage(msg) {
            const p = document.createElement('p');
            p.className = 'leading-tight break-words';
            
            const userSpan = document.createElement('strong');
            userSpan.className = `mr-1 text-gray-300`;
            userSpan.textContent = `[${msg.userName}]:`;
            
            p.appendChild(userSpan);
            p.append(document.createTextNode(msg.text));

            ui.footerChatContentWrapper.appendChild(p);
        }

        function handleSendMessage() {
            const modalText = ui.messageInput.value.trim();
            const footerText = ui.footerMessageInput.value.trim();
            const text = modalText || footerText;

            if (!text) return;

            const messageData = { 
                id: `msg_${Date.now()}`,
                userId: currentUser.id, 
                userName: currentUser.name, 
                avatarUrl: currentUser.avatarUrl, 
                text, 
                timestamp: Date.now() 
            };
            if (replyingToMessage) {
                messageData.replyTo = { 
                    messageId: replyingToMessage.id, 
                    userName: replyingToMessage.userName, 
                    text: replyingToMessage.text 
                };
            }
            
            localMessages[activeChannel].push(messageData);
            
            ui.messageInput.value = '';
            ui.footerMessageInput.value = '';
            cancelReply();
            
            renderAllMessages();
        }

        function switchChannel(channelName) {
            activeChannel = channelName;
            
            document.querySelectorAll('#tabs-container .tab').forEach(t => {
                t.classList.toggle('active', t.dataset.channel === channelName);
            });
            
            ui.footerTabButtons.forEach(btn => {
                btn.classList.toggle('active', btn.dataset.channel === channelName);
            });

            renderAllMessages();
        }

        function populateOnlineUsers() {
            ui.onlineUsersList.innerHTML = '';
            onlineUsers.forEach(user => {
                const el = document.createElement('div');
                el.className = 'flex items-center gap-2 p-2 rounded-md hover:bg-white/10 cursor-pointer';
                el.innerHTML = `<img src="${user.avatarUrl}" class="avatar w-6 h-6" onerror="this.src='https://placehold.co/24x24/1a1a1a/ffffff?text=?'"><span class="text-sm text-gray-300 truncate">${user.name}</span>`;
                ui.onlineUsersList.appendChild(el);
            });
        }

        function setupEventListeners() {
            ui.openChatModalBtn.addEventListener('click', () => ui.chatModal.classList.remove('hidden'));
            ui.closeChatModalBtn.addEventListener('click', () => ui.chatModal.classList.add('hidden'));

            ui.messageForm.addEventListener('submit', (e) => { e.preventDefault(); handleSendMessage(); });
            ui.footerMessageForm.addEventListener('submit', (e) => { e.preventDefault(); handleSendMessage(); });
            
            ui.openSidebarBtn.addEventListener('click', () => toggleSidebar(true));
            ui.closeSidebarBtn.addEventListener('click', () => toggleSidebar(false));
            ui.sidebarOverlay.addEventListener('click', () => toggleSidebar(false));

            ui.cancelReplyBtn.addEventListener('click', cancelReply);
            ui.chatMessages.addEventListener('click', (e) => {
                const replyTarget = e.target.closest('.reply-icon');
                if (replyTarget) {
                    const messageId = replyTarget.dataset.messageId;
                    const messageToReply = localMessages[activeChannel].find(m => m.id === messageId);
                    if (messageToReply) {
                        setReplyingTo(messageToReply);
                    }
                }
            });
            
            ui.tabsContainer.addEventListener('click', (e) => {
                const tab = e.target.closest('.tab');
                if (tab && tab.dataset.channel) {
                    switchChannel(tab.dataset.channel);
                }
            });
            ui.footerTabButtons.forEach(btn => {
                btn.addEventListener('click', () => {
                    if (btn.dataset.channel) {
                        switchChannel(btn.dataset.channel);
                    }
                });
            });
        }

        // --- Initial Setup ---
        function main() {
            setupEventListeners();
            populateOnlineUsers();
            switchChannel('main');
        }

        main();

    </script>
</body>
</html>
